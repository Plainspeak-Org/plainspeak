name: Package Test Workflow

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to test'
        required: true
        default: '0.1.0-test'

permissions:
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.version }}
  cancel-in-progress: true

jobs:
  test-package:
    name: Test Package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements-tests.txt
          pip install pyinstaller
          pip install -e .
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: 1

      - name: Build binary
        run: |
          # Debug info
          echo "Current directory: $(pwd)"
          echo "Contents of plainspeak/:"
          ls -la plainspeak/

          # Build the binary with debug info
          pyinstaller --name plainspeak \
                     --onefile \
                     --clean \
                     --log-level DEBUG \
                     --add-data "plainspeak/plugins:plugins" \
                     --add-data "plainspeak/prompts:prompts" \
                     plainspeak/cli.py

          # Show PyInstaller output
          echo "Contents of dist/:"
          ls -la dist/

          # Create final binary structure
          rm -rf dist/plainspeak
          mkdir -p dist/plainspeak
          cp "dist/plainspeak" "dist/plainspeak/plainspeak"
          chmod +x "dist/plainspeak/plainspeak"

          # Verify final structure
          echo "Final binary structure:"
          ls -lR dist/
          file dist/plainspeak/plainspeak
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: Run tests
        id: run-tests
        run: |
          # Run tests and capture output
          python -m pytest tests/ -v --cov=plainspeak --cov-report=term-missing 2>&1 | tee test_output.log

          # Store exit code
          echo "exit_code=${PIPESTATUS[0]}" >> $GITHUB_OUTPUT
        env:
          PLAINSPEAK_TEST: 1
          PLAINSPEAK_CONFIG: ${{ github.workspace }}/tests/test_config.yaml
          PLAINSPEAK_NO_LLM: 1  # Skip actual LLM calls in tests
          PLAINSPEAK_MODEL_PATH: ${{ github.workspace }}/tests/test_model
        continue-on-error: true

      - name: Create test report
        if: always()
        run: |
          {
            echo "## Test Results"
            echo "Version: ${{ github.event.inputs.version }}"
            echo ""

            if [ "${{ steps.run-tests.outputs.exit_code }}" = "0" ]; then
              echo "✅ Tests passed successfully"
            else
              echo "❌ Some tests failed"
            fi

            echo ""
            echo "### Detailed Test Output"
            echo "\`\`\`"
            cat test_output.log
            echo "\`\`\`"

          } >> $GITHUB_STEP_SUMMARY
